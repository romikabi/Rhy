//
//  SongSearchViewController.swift
//  Rhy
//
//  Created by Roman Abuzyarov on 08.03.2018.
//  Copyright (c) 2018 Roman Abuzyarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SongSearchDisplayLogic: class
{
    func displaySearchResults(viewModel: SongSearch.Search.ViewModel)
    func displayRecent(viewModel: SongSearch.Recent.ViewModel)
}

class SongSearchViewController: UIViewController
{
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: SongSearchBusinessLogic?
    var router: (NSObjectProtocol & SongSearchRoutingLogic & SongSearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SongSearchInteractor()
        let presenter = SongSearchPresenter()
        let router = SongSearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    let searchController = UISearchController(searchResultsController: nil)
    
    func initSearchController(){
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Search songs"
        //searchController.hidesNavigationBarDuringPresentation = false
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        definesPresentationContext = true
    }
    
    func registerNibs(){
        self.collectionView.register(UINib(nibName: "SongSearchCell", bundle: nil), forCellWithReuseIdentifier: "songSearchCell")
    }
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initSearchController()
        registerNibs()
        recent()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func search(query: String)
    {
        let request = SongSearch.Search.Request(query: query)
        interactor?.search(request: request)
    }
    
    func recent(){
        let request = SongSearch.Recent.Request()
        interactor?.recent(request: request)
    }
    
    var items: [SongItem] = []{
        didSet{
            collectionView.reloadData()
        }
    }
    
    var imageCacheManager = ImageCacheManager()
}

extension SongSearchViewController : SongSearchDisplayLogic{
    func displayRecent(viewModel: SongSearch.Recent.ViewModel) {
        self.items = viewModel.items
    }
    
    func displaySearchResults(viewModel: SongSearch.Search.ViewModel)
    {
        self.items = viewModel.items
    }
}

extension SongSearchViewController: UISearchResultsUpdating {
    // MARK: - UISearchResultsUpdating Delegate
    func updateSearchResults(for searchController: UISearchController) {
        if let text = searchController.searchBar.text, text != ""{
            self.search(query: text)
        }
        else{
            self.recent()
        }
    }
}

extension SongSearchViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return items.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "songSearchCell", for: indexPath) as? SongSearchCell{
            
            let item = items[indexPath.row]
            
            cell.item = item
            
            if let image = imageCacheManager.cachedImage(url: item.url) {
                // Cached: set immediately.
                
                cell.imageView.image = image
                cell.imageView.alpha = 1
            } else {
                // Not cached, so load then fade it in.
                cell.imageView.alpha = 0
                
                imageCacheManager.fetchImage(url: item.url, completion: { (image) in
                    // Check the cell hasn't recycled while loading.
                    if (cell.item?.id ?? "") == item.id {
                        cell.imageView.image = image
                        UIView.animate(withDuration: 0.2) {
                            cell.imageView.alpha = 1
                        }
                    }
                })
            }
            
            cell.artistLabel.text = item.artistName
            cell.titleLabel.text = item.name
            cell.albumLabel.text = item.albumName
            
            return cell
        }
        return UICollectionViewCell()
    }
    
    
}
