//
//  SongSearchInteractor.swift
//  Rhy
//
//  Created by Roman Abuzyarov on 08.03.2018.
//  Copyright (c) 2018 Roman Abuzyarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SongSearchBusinessLogic
{
    func search(request: SongSearch.Search.Request)
    func recent(request: SongSearch.Recent.Request)
    func songs(request: SongSearch.Songs.Request)
}

protocol SongSearchDataStore
{
    var search: [MediaItem] {get set}
    var recent: [MediaItem] {get set}
    var songs: [MediaItem] {get set}
    
    var data: [MediaItem] {get set}
}

class SongSearchInteractor: SongSearchBusinessLogic, SongSearchDataStore
{
    var songs: [MediaItem] = []
    
    var search: [MediaItem] = []
    
    var recent: [MediaItem] = []
    
    var data: [MediaItem] = []
    
    var presenter: SongSearchPresentationLogic?
    var worker: SongSearchWorker?
    
    // MARK: Do something
    init(){
        worker = SongSearchWorker()
    }
    
    func search(request: SongSearch.Search.Request)
    {
        worker?.search(for: request.query, onComplete: { (items) in
            let response = SongSearch.Search.Response(items: items)
            self.search = items
            self.data = items
            self.presenter?.presentSearchResults(response: response)
        })
    }
    
    func recent(request: SongSearch.Recent.Request) {
        worker?.recent(onComplete: { (items) in
            let response = SongSearch.Recent.Response(items: items)
            self.recent = items
            self.data = items
            self.presenter?.presentRecent(response: response)
        })
    }
    
    func songs(request: SongSearch.Songs.Request) {
        worker?.songsWithLevels(onComplete: { (items) in
            let response = SongSearch.Songs.Response(items: items)
            self.songs = items
            self.data = items
            self.presenter?.presentSongs(response: response)
        })
    }
}
